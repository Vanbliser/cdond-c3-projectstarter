version: 2.1

orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7} 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.id>>
            aws s3 rm s3://udapeople-<<parameters.id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/K7pp94DsaMkkKtgtGAzhMv/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if(( "$SUCCESS"=="Found" )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "Welcome, to Circleci Slack notification",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run backend test
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm install --save-dev webpack@5.74.0
            npm update mkdirp --depth 6
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: C040GTR98GP
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: C040GTR98GP
          event: pass
          template: success_tagged_deploy_1
      
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - aws-cli/setup
      - checkout
      - run: yum install tar gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          branch_pattern: test-feature-branch
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "Passed on ${CIRCLE_BRANCH} @ ${CIRCLE_BUILD_NUM}",
                      "emoji": true
                    }
                  ]
                }
              ]
            }

  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - aws-cli/setup
      - add_ssh_keys:
          fingerprints: ["96:4a:db:8e:55:54:05:76:4f:5c:26:0a:de:d9:7d:0e"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: apk add --update --no-cache ansible tar gzip openssh
      - run:
          name: Configure server
          command: |
            pwd
            cd .circleci/ansible
            ls -al
            ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: 30m
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            sudo npm install -g npm
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -v https://kvdb.io/K7pp94DsaMkkKtgtGAzhMv/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 'Found'
            else
              curl -v https://kvdb.io/K7pp94DsaMkkKtgtGAzhMv/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d 'Not Found'
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - aws-cli/setup
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache ansible tar gzip nodejs npm curl
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
                    
  deploy-backend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - aws-cli/setup
      - add_ssh_keys:
          fingerprints: ["96:4a:db:8e:55:54:05:76:4f:5c:26:0a:de:d9:7d:0e"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache ansible tar gzip nodejs npm curl
      - run:
          name: Deploy backend
          command: |
            pwd
            cd backend

            touch .env
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

            pwd
            ls -al
            npm install
            npm run build
            cd ..
            pwd
            ls -al
            tar -C backend -czvf artifact.tar.gz .

            cd .circleci/ansible

            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Install dependencies
          command: |
            yum install curl
            yum install tar gzip -y
      - run:
          name: Get backend url and Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo ${BACKEND_IP}
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"

            sleep 60

            if curl -v "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            
            echo ${URL} 

            if curl -v ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}     
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - aws-cli/setup
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar gzip -y
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text | grep -o '[^-]*$' )
            echo $OldWorkflowID >> ~/project/OldWorkflowID.txt
            cat ~/project/OldWorkflowID.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/OldWorkflowID.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitialStack \
              --tags project=${CIRCLE_WORKFLOW_ID:0:7}
            echo "OldWorkflowID: $(cat ~/project/OldWorkflowID.txt)"
            echo "CurrentWorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}     
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - aws-cli/setup
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar gzip -y
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack name: "${STACKS[@]}"
            cat ~/project/OldWorkflowID.txt
            export OldWorkflowID=$(cat ~/project/OldWorkflowID.txt)
            echo OldWorkflowID: ${OldWorkflowID}
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID="$(cat ~/project/OldWorkflowID.txt)"
            if [[ ${CIRCLE_WORKFLOW_ID:0:7} != "${OldWorkflowID}" ]]
            then
              echo "Deleting old stack"
              echo "s3://udapeople-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive || true
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}" || true
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" || true
            else
              echo "Stack is the latest"
            fi
      - slack/notify:
          channel: C040GTR98GP
          event: pass
          template: success_tagged_deploy_1

workflows: 
  default:
    jobs:
      - build-frontend:
          context: my_context
      - build-backend:
          context: my_context
      - test-frontend:
          requires: [build-frontend]
          context: my_context
      - test-backend:
          requires: [build-backend]
          context: my_context
      - scan-backend:
          requires: [build-backend]
          context: my_context
      - scan-frontend:
          requires: [build-frontend]
          context: my_context
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          context: my_context
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          context: my_context
      - run-migrations:
          requires: [configure-infrastructure]
          context: my_context
      - deploy-frontend:
          requires: [run-migrations]
          context: my_context
      - deploy-backend:
          requires: [run-migrations]
          context: my_context
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          context: my_context
      - cloudfront-update:
          requires: [smoke-test]
          context: my_context
      - cleanup:
          requires: [cloudfront-update]
          context: my_context

